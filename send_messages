from telethon.sync import TelegramClient
from telethon.errors import PersistentTimestampOutdatedError, FloodWaitError, RPCError, SessionPasswordNeededError, PhoneNumberInvalidError
import asyncio
import time
import os
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
api_id = 26397630
api_hash = '179422560c06f011140f784ce3f9e35b'
phone = '+77782678576'

# —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
group_usernames = ['steal_a_brainrota8', 'ishchu_druzeyy', 'goo_vz', 'kukold_tg_chat', 'znakomstva_spb17', 'viirtsexchat', 'tribo529SexxPure',
                   'virtvz1', 'chatlinsaf', 'exclusivo25', 'DaliOcenitChatiku', 'poisk_virtt', 'znakomstva46738']
# –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –¥–æ–±–∞–≤–∏—Ç—å: @druzyab, @nayticc0, @chatikGQ
message_text = '''
<b>üèÜ –¢–æ–ø–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª–æ–≥–µ—Ä—à –∏ –º–æ–¥–µ–ª–µ–π —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ üå∂Ô∏è<a href="https://t.me/+Epvlf_bnOeY1YzMy">SpicyGirls 21+</a>üå∂Ô∏è</b>

<i>üîû –í—Å–µ —Å–∞–º—ã–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ —Å –ê–Ω–Ω—Ñ–∏–≥–º–æ–π, Coxifoxy, –í–∞–ª–µ–π –ö–∞—Ä–Ω–∞–≤–∞–ª, Sweetie Fox –∏ –º–Ω–æ–≥–∏–º–∏ –¥—Ä—É–≥–∏–º–∏ —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, —É–±–µ–¥–∏—Å—å —Å–∞–º</i>

üëâ <b><a href="https://t.me/+Epvlf_bnOeY1YzMy">–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø</a></b> üî•
'''

image_path = None
delay_seconds = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: "))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–æ–≤
chat_cooldown = {}

async def create_client():
    client = TelegramClient('user_session', api_id, api_hash)
    
    try:
        await client.connect()
        
        if not await client.is_user_authorized():
            print("üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
            try:
                await client.send_code_request(phone)
                print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram") 
            except PhoneNumberInvalidError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return None
            
            code = input('üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ').strip()
            
            try:
                await client.sign_in(phone, code)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            except SessionPasswordNeededError:
                print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                password = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ')
                await client.sign_in(password=password)
        
        return client
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

async def send_to_group(client, group, media=None, max_retries=3):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∫–æ—É–ª–¥–∞—É–Ω–µ –ª–∏ —á–∞—Ç
    current_time = time.time()
    if group in chat_cooldown and current_time < chat_cooldown[group]:
        wait_time = chat_cooldown[group] - current_time
        print(f"‚è≥ –ß–∞—Ç {group} –≤ –∫–æ—É–ª–¥–∞—É–Ω–µ. –ñ–¥–µ–º {wait_time:.0f} —Å–µ–∫—É–Ω–¥...")
        return False

    for attempt in range(max_retries):
        try:
            entity = await client.get_entity(group)
            
            if media:
                await client.send_file(
                    entity,
                    file=media,
                    caption=message_text,
                    parse_mode='html'
                )
            else:
                await client.send_message(entity, message_text, parse_mode='html')
                
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ {group} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {time.strftime('%H:%M:%S')}")
            
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, —É–±–∏—Ä–∞–µ–º –∫–æ—É–ª–¥–∞—É–Ω –µ—Å–ª–∏ –±—ã–ª
            if group in chat_cooldown:
                del chat_cooldown[group]
                
            return True
            
        except FloodWaitError as e:
            wait_time = e.seconds + 10
            print(f"‚è≥ –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ {group}! –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—É–ª–¥–∞—É–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_cooldown[group] = current_time + wait_time
            await asyncio.sleep(wait_time)
            continue
            
        except PersistentTimestampOutdatedError:
            wait_time = random.randint(10, 30)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ {group}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)
            
            await client.disconnect()
            client = await create_client()
            if not client:
                return False
            continue
            
        except RPCError as e:
            error_msg = str(e)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC –≤ {group}: {error_msg[:100]}...")
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–æ–ª–≥–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º, —Å—Ç–∞–≤–∏–º –∫–æ—É–ª–¥–∞—É–Ω
            if "wait of" in error_msg and "seconds is required" in error_msg:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏
                    wait_match = error_msg.split("wait of ")[1].split(" seconds")[0]
                    wait_time = int(float(wait_match)) + 30
                    chat_cooldown[group] = current_time + wait_time
                    print(f"üîí –ß–∞—Ç {group} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {wait_time} —Å–µ–∫—É–Ω–¥")
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è, —Å—Ç–∞–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—É–ª–¥–∞—É–Ω
                    chat_cooldown[group] = current_time + 600  # 10 –º–∏–Ω—É—Ç
                    print(f"üîí –ß–∞—Ç {group} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç")
            
            await asyncio.sleep(random.randint(10, 20))
            return False
            
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {group}: {error_msg[:100]}...")
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å—Ç–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ—É–ª–¥–∞—É–Ω
            chat_cooldown[group] = current_time + 300  # 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(random.randint(5, 10))
            return False
    
    print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {group}")
    # –°—Ç–∞–≤–∏–º –∫–æ—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
    chat_cooldown[group] = current_time + 600  # 10 –º–∏–Ω—É—Ç
    return False

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞
    media = None
    if image_path and os.path.exists(image_path):
        try:
            client = await create_client()
            if client:
                file = await client.upload_file(image_path)
                media = file
                await client.disconnect()
                print("‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞")
        except Exception as upload_error:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {upload_error}")

    while True:
        start_time = time.time()
        print(f"\nüöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {time.strftime('%H:%M:%S')}")
        
        client = None
        try:
            client = await create_client()
            if not client:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(60)
                continue
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
            random.shuffle(group_usernames)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            successful_sends = 0
            total_groups = len(group_usernames)
            
            for group in group_usernames:
                success = await send_to_group(client, group, media)
                
                if success:
                    successful_sends += 1
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                delay = random.uniform(3, 10) if success else random.uniform(5, 15)
                print(f"‚è≥ –ñ–¥–µ–º {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...")
                await asyncio.sleep(delay)
            
            elapsed = time.time() - start_time
            print(f"‚è± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends}/{total_groups} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç—ã –≤ –∫–æ—É–ª–¥–∞—É–Ω–µ
            if chat_cooldown:
                print("üìã –ß–∞—Ç—ã –≤ –∫–æ—É–ª–¥–∞—É–Ω–µ:")
                for chat, unlock_time in chat_cooldown.items():
                    remaining = unlock_time - time.time()
                    if remaining > 0:
                        print(f"   - {chat}: {remaining:.0f} —Å–µ–∫")
            
            if delay_seconds > elapsed:
                remaining = delay_seconds - elapsed
                print(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {remaining:.2f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
                await asyncio.sleep(remaining)
                
        except Exception as e:
            print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(30)
        finally:
            if client:
                await client.disconnect()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
