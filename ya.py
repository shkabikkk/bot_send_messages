from telethon.sync import TelegramClient
from telethon.tl.functions.messages import SendMediaRequest
from telethon.tl.types import InputMediaUploadedPhoto, InputMediaUploadedDocument
from telethon.errors import PersistentTimestampOutdatedError, FloodWaitError, RPCError
import asyncio
import time
import os
import sys
import random
import threading
import telebot
from telebot import types
import logging
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
api_id = 26940168
api_hash = '215022f99105f13b0e091b010463fef3'
phone = '+14407393438'
bot_token = '7652897749:AAGxhDJWdVQZKJSZ9z4WdIxEiEgPdZBnGcA'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
script_running = False
current_script_thread = None
stop_event = threading.Event()
log_subscribers = set()
log_stream = StringIO()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.StreamHandler(log_stream)
    ]
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
group_usernames = ['wbery_vip2', 'wberysl', 
                  'chatik_piarvz777', 'STANDOFF_2n', 'standoff_chatk', 'Nowasti_ot_Mr_Roblox'
                  , 'models_chat_traun_poezda12', 'brawl_stars_chat02', 'fin_crypto_chat', 'brawlstarschatik_24'
                  , 'ufarabota_chat']

message_text = '''
üî•–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ä–∞–π —É–∂–µ –∑–¥–µ—Å—åüî•
–¢–æ–ø–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª–æ–≥–µ—Ä—à –∏ –º–æ–¥–µ–ª–µ–π —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ üîû–ú–û–î–ï–õ–ò 18+üîû (https://t.me/models18_plus)
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚úÖ –°–∞–º—ã–µ –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏

üëâ –ñ–º–∏ —Å—é–¥–∞ (https://t.me/models18_plus)
'''
image_path = None
delay_seconds = 60

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)

def show_main_menu(chat_id, message_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤')
    btn2 = types.KeyboardButton('‚úâÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    btn3 = types.KeyboardButton('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    btn4 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç')
    btn5 = types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç')
    btn6 = types.KeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    btn7 = types.KeyboardButton('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    btn8 = types.KeyboardButton('üìú –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏')
    btn9 = types.KeyboardButton('üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏')
    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5)
    markup.row(btn6, btn7)
    markup.row(btn8, btn9)
    
    bot.send_message(chat_id, message_text, reply_markup=markup)

class LogSender:
    def __init__(self):
        self.active = False
        self.last_sent_position = 0
    
    def start_sending_logs(self, chat_id):
        if chat_id not in log_subscribers:
            log_subscribers.add(chat_id)
            self.active = True
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ª–æ–≥–∏")
    
    def stop_sending_logs(self, chat_id):
        if chat_id in log_subscribers:
            log_subscribers.remove(chat_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ª–æ–≥–æ–≤")
    
    def send_new_logs(self):
        if not log_subscribers:
            return
        
        log_content = log_stream.getvalue()
        new_content = log_content[self.last_sent_position:]
        
        if new_content:
            for chat_id in list(log_subscribers):
                try:
                    if len(new_content) > 4000:
                        parts = [new_content[i:i+4000] for i in range(0, len(new_content), 4000)]
                        for part in parts:
                            bot.send_message(chat_id, f"<pre>{part}</pre>", parse_mode='HTML')
                    else:
                        bot.send_message(chat_id, f"<pre>{new_content}</pre>", parse_mode='HTML')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                    log_subscribers.remove(chat_id)
            
            self.last_sent_position = len(log_content)

log_sender = LogSender()

async def create_client():
    client = TelegramClient('user_session', api_id, api_hash)
    await client.connect()
    
    if not await client.is_user_authorized():
        await client.send_code_request(phone)
        await client.sign_in(phone, input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '))
    
    return client

async def send_to_group(client, group, media=None, max_retries=3):
    for attempt in range(max_retries):
        if stop_event.is_set():
            return False
            
        try:
            entity = await client.get_entity(group)
            
            if media:
                await client(SendMediaRequest(
                    peer=entity,
                    media=media,
                    message=message_text
                ))
            else:
                await client.send_message(entity, message_text)
                
            logger.info(f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –≤ {group} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            if stop_event.is_set():
                return False
                
            logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {group}: {str(e)}")
            await asyncio.sleep(random.randint(5, 15))
    
    return False

async def main_async():
    global script_running
    
    media = None
    if image_path and os.path.exists(image_path):
        try:
            client = await create_client()
            file = await client.upload_file(image_path)
            media = InputMediaUploadedPhoto(file) if image_path.lower().endswith(('.png', '.jpg', '.jpeg')) else InputMediaUploadedDocument(file)
            await client.disconnect()
        except Exception as upload_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {upload_error}")

    while not stop_event.is_set():
        start_time = time.time()
        logger.info("–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        try:
            client = await create_client()
            random.shuffle(group_usernames)
            
            for group in group_usernames:
                if stop_event.is_set():
                    break
                    
                success = await send_to_group(client, group, media)
                
                if stop_event.is_set():
                    break
                    
                delay = random.uniform(3, 10) if success else random.uniform(10, 30)
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
                
                start_delay = time.time()
                while (time.time() - start_delay) < delay and not stop_event.is_set():
                    await asyncio.sleep(0.5)
                    log_sender.send_new_logs()
                
                if stop_event.is_set():
                    break
            
            if stop_event.is_set():
                break
                
            elapsed = time.time() - start_time
            logger.info(f"–¶–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
            
            if delay_seconds > elapsed:
                remaining = delay_seconds - elapsed
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {remaining:.2f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                
                start_delay = time.time()
                while (time.time() - start_delay) < remaining and not stop_event.is_set():
                    await asyncio.sleep(0.5)
                    log_sender.send_new_logs()
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)
        finally:
            if 'client' in locals():
                await client.disconnect()
    
    script_running = False
    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    asyncio.run(main_async())

def start_script():
    global script_running, current_script_thread, stop_event
    
    if script_running:
        return "–°–∫—Ä–∏–ø—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    
    stop_event.clear()
    script_running = True
    current_script_thread = threading.Thread(target=main)
    current_script_thread.start()
    return "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!"

def stop_script():
    global script_running, stop_event
    
    if not script_running:
        return "–°–∫—Ä–∏–ø—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!"
    
    stop_event.set()
    script_running = False
    return "–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è... –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤')
def show_chats(message):
    chats_list = "\n".join([f"{i+1}. {chat}" for i, chat in enumerate(group_usernames)])
    bot.send_message(message.chat.id, f"üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ ({len(group_usernames)}):\n\n{chats_list}")
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == '‚úâÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
def show_message(message):
    bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message_text}")
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
def change_message(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_message_change)

def process_message_change(message):
    global message_text
    message_text = message.text
    show_main_menu(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç')
def add_chat(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username —á–∞—Ç–∞ (–±–µ–∑ @):", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_chat_add)

def process_chat_add(message):
    chat = message.text.strip().replace('@', '')
    if chat not in group_usernames:
        group_usernames.append(chat)
        show_main_menu(message.chat.id, f"‚úÖ –ß–∞—Ç @{chat} –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        show_main_menu(message.chat.id, f"‚ö†Ô∏è –ß–∞—Ç @{chat} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")

@bot.message_handler(func=lambda message: message.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç')
def remove_chat(message):
    markup = types.InlineKeyboardMarkup()
    for chat in group_usernames:
        markup.add(types.InlineKeyboardButton(chat, callback_data=f"remove_{chat}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_'))
def process_chat_remove(call):
    chat = call.data[7:]
    if chat in group_usernames:
        group_usernames.remove(chat)
        bot.edit_message_text(f"‚úÖ –ß–∞—Ç @{chat} —É–¥–∞–ª–µ–Ω!", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    show_main_menu(call.message.chat.id)

@bot.message_handler(func=lambda message: message.text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
def start_distribution(message):
    if script_running:
        show_main_menu(message.chat.id, "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
        
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_start_distribution)

def process_start_distribution(message):
    global delay_seconds
    try:
        delay_seconds = int(message.text)
        result = start_script()
        show_main_menu(message.chat.id, result)
    except ValueError:
        show_main_menu(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
def stop_distribution(message):
    result = stop_script()
    show_main_menu(message.chat.id, result)

@bot.message_handler(func=lambda message: message.text == 'üìú –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏')
def show_logs(message):
    log_sender.start_sending_logs(message.chat.id)
    show_main_menu(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤. –ù–æ–≤—ã–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    
    log_content = log_stream.getvalue()
    last_lines = "\n".join(log_content.splitlines()[-10:])
    if last_lines:
        bot.send_message(message.chat.id, f"<pre>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{last_lines}</pre>", parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == 'üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏')
def stop_logs(message):
    log_sender.stop_sending_logs(message.chat.id)
    show_main_menu(message.chat.id, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ª–æ–≥–∏.")

def log_sender_loop():
    while True:
        try:
            log_sender.send_new_logs()
            time.sleep(5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ log_sender_loop: {e}")
            time.sleep(10)

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    log_thread = threading.Thread(target=log_sender_loop, daemon=True)
    log_thread.start()
    
    bot_thread = threading.Thread(target=bot.polling, kwargs={'none_stop': True})
    bot_thread.start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        stop_event.set()
        bot.stop_polling()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        stop_event.set()
        bot.stop_polling()
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")